/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MantenedorProducto;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import com.toedter.calendar.JDateChooser;
import javax.swing.DefaultComboBoxModel;
/**
 *
 * @author Daniel
 */
public class frmDeleProd extends javax.swing.JFrame {

    /**
     * Creates new form frmDeleProd
     */
    public frmDeleProd() {
        initComponents();
        llenarComboBoxNombre();
        llenarComboBoxEstado();
        this.setLocationRelativeTo(null);
        String primerNombre = (String) cmbNombre.getSelectedItem();

    // Verificar si hay un primer nombre seleccionado
    if (primerNombre != null) {
        llenarDescripcionYEstado(primerNombre);
    }
    
        txtDescripcion.setEnabled(false);
        cmbEstado.setEnabled(false);
    }
    
    private void llenarComboBoxNombre() {
       try {
            Connection conn = Conexion.getConexion();
            String sql = "SELECT Nombre FROM Producto";
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
                while (rs.next()) {
                    model.addElement(rs.getString("Nombre"));
                }
                cmbNombre.setModel(model);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar los nombres: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void llenarDescripcionYEstado(String nombre) {
         try {
            Connection conn = Conexion.getConexion();
            String sql = "SELECT Descripcion, Estado FROM Producto WHERE Nombre = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, nombre);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        txtDescripcion.setText(rs.getString("Descripcion"));
                        cmbEstado.setSelectedItem(rs.getString("Estado"));
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontró información para el nombre seleccionado.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al obtener la información: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void llenarComboBoxEstado() {
        try {
            Connection conn = Conexion.getConexion();
            String sql = "SELECT DISTINCT Estado FROM Producto";
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
                while (rs.next()) {
                    model.addElement(rs.getString("Estado"));
                }
                cmbEstado.setModel(model);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar los estados: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    



    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmdEliminar = new javax.swing.JButton();
        cmbEstado = new javax.swing.JComboBox<>();
        cmbNombre = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        cmdEliminar1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        cmdEliminar.setBackground(new java.awt.Color(255, 0, 0));
        cmdEliminar.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        cmdEliminar.setForeground(new java.awt.Color(255, 255, 255));
        cmdEliminar.setText("Eliminar");
        cmdEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEliminarActionPerformed(evt);
            }
        });

        cmbEstado.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N

        cmbNombre.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        cmbNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbNombreActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        jLabel1.setText("Nombre");

        jLabel2.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        jLabel2.setText("Descripcion");

        jLabel3.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        jLabel3.setText("Estado");

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel4.setText("ELIMINAR PRODUCTO");

        txtDescripcion.setColumns(20);
        txtDescripcion.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        txtDescripcion.setRows(5);
        jScrollPane1.setViewportView(txtDescripcion);

        cmdEliminar1.setBackground(new java.awt.Color(0, 0, 0));
        cmdEliminar1.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        cmdEliminar1.setForeground(new java.awt.Color(255, 255, 255));
        cmdEliminar1.setText("Volver");
        cmdEliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEliminar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdEliminar1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel4)))
                .addContainerGap(91, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(cmdEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel4)
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdEliminar1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEliminarActionPerformed
        // Obtener los valores seleccionados
        String nombreSeleccionado = (String) cmbNombre.getSelectedItem();
        String descripcionSeleccionada = txtDescripcion.getText();
        String estadoSeleccionado = (String) cmbEstado.getSelectedItem();

        // Validar que se haya seleccionado un nombre
        if (nombreSeleccionado == null || nombreSeleccionado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un nombre antes de intentar eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar que se haya ingresado una descripción
        if (descripcionSeleccionada == null || descripcionSeleccionada.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa una descripción antes de intentar eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar que se haya seleccionado un estado
        if (estadoSeleccionado == null || estadoSeleccionado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un estado antes de intentar eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Preguntar al usuario si realmente desea eliminar
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Seguro que deseas eliminar el producto?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            // Llamada a la función para eliminar en la base de datos
            eliminarProducto(nombreSeleccionado, descripcionSeleccionada, estadoSeleccionado);

            // Después de eliminar, limpiar campos y deshabilitar
            limpiarCampos();
        }
    }
    private void limpiarCampos() {
        // Limpiar campos
        cmbNombre.setSelectedIndex(-1);
        txtDescripcion.setText("");
        cmbEstado.setSelectedIndex(-1);

        // Deshabilitar campos
        txtDescripcion.setEnabled(false);
        cmbEstado.setEnabled(false);
    }

    private void eliminarProducto(String nombre, String descripcion, String estado) {
       try {
            // Obtener conexión desde tu clase Conexion
            Connection conn = Conexion.getConexion();

            // Verificar si la conexión es válida
            if (conn != null) {
                // Crear la consulta SQL
                String sql = "DELETE FROM Producto WHERE Nombre = ? AND Descripcion = ? AND Estado = ?";

                // Crear el statement
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    // Establecer los parámetros
                    stmt.setString(1, nombre);
                    stmt.setString(2, descripcion);
                    stmt.setString(3, estado);

                    // Ejecutar la actualización (DELETE)
                    int filasAfectadas = stmt.executeUpdate();

                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.");
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontró un producto con los datos proporcionados. No se puede eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Error al obtener la conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al ejecutar la consulta SQL: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        

    }//GEN-LAST:event_cmdEliminarActionPerformed

    private void cmbNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbNombreActionPerformed
        // Al seleccionar un nombre, llenar la descripción y el estado
    String nombreSeleccionado = (String) cmbNombre.getSelectedItem();
    if (nombreSeleccionado != null) {
        llenarDescripcionYEstado(nombreSeleccionado);
    }
    }//GEN-LAST:event_cmbNombreActionPerformed

    private void cmdEliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEliminar1ActionPerformed
    this.dispose();
    }//GEN-LAST:event_cmdEliminar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDeleProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDeleProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDeleProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDeleProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDeleProd().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbEstado;
    private javax.swing.JComboBox<String> cmbNombre;
    private javax.swing.JButton cmdEliminar;
    private javax.swing.JButton cmdEliminar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtDescripcion;
    // End of variables declaration//GEN-END:variables
}
